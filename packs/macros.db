{"name":"Split","type":"script","author":"ODc5MmQ1Y2RhY2M3","img":"icons/svg/downgrade.svg","scope":"global","command":"let t = canvas.tokens.get(args[1])\n\nif(t.data.height > 1) {\n    await scene.updateEmbeddedDocuments(\"Token\", {\"_id\": args[1], \"height\": (t.document.height - 1), \"width\": (t.document.width - 1)})\n}\nelse {\n    await scene.updateEmbeddedDocuments(\"Token\", {\"_id\": args[1], \"scale\": (t.document.scale / 2)})\n}\nlet targetScene = game.scenes.get(args[2])\nlet new_t = t.clone()\nawait targetScene.updateEmbeddedDocuments('Token', mergeObject(new_t, { \"x\": t.x || 0, \"y\": t.y || 0}, { overwrite: true, inplace: true }));","folder":null,"sort":0,"flags":{"advanced-macros":{"runAsGM":false},"core":{"sourceId":"Macro.UsMFbV3SECkQKoz0"}},"_id":"D0AUsuANuHE0o2sn","ownership":{"default":0,"ODc5MmQ1Y2RhY2M3":3},"_stats":{"systemId":"dnd5e","systemVersion":"2.0.2","coreVersion":"10.284","createdTime":null,"modifiedTime":1662565267006,"lastModifiedBy":"xVCVzNPUKcRx8Gf2"}}
{"name":"Remove Condition","type":"script","author":"ODc5MmQ1Y2RhY2M3","img":"icons/svg/degen.svg","scope":"global","command":"CONDITIONS = ['Blind', 'Charmed', 'Deafened', 'Frightened', 'Grappled', 'Paralyzed', 'Petrified', 'Poisoned', 'Prone', 'Restrained', 'Stunned', 'Unconscious']\nlet tokens = game.canvas.tokens.controlled\nfor(var i = 0; i < tokens.length; i++) {\n\tfor (var j = 0; j < CONDITIONS.length; j++) {\n\t\tlet effect = tokens[i].actor.effects.find(e => e.label === CONDITIONS[j]);\n\t\tif(effect) await effect.delete()\n\t}\n}","folder":null,"sort":0,"flags":{"advanced-macros":{"runAsGM":false},"core":{"sourceId":"Macro.9nyEgFzgF2ZjNKPl"}},"_id":"JBrYfESruR3YUotj","ownership":{"default":0,"ODc5MmQ1Y2RhY2M3":3},"_stats":{"systemId":"dnd5e","systemVersion":"2.0.2","coreVersion":"10.284","createdTime":null,"modifiedTime":1662565260363,"lastModifiedBy":"xVCVzNPUKcRx8Gf2"}}
{"name":"Apply Condition","type":"script","author":"ODc5MmQ1Y2RhY2M3","img":"icons/svg/regen.svg","scope":"global","command":"const Blind = {\n\tlabel: \"Blind\",\n\ticon: \"icons/svg/blind.svg\",\n\tchanges: [\n\t\t{key: \"StatusEffect\", value: \"Blind\", mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM},\n\t\t{key: \"ATL.brightSight\", value: 0, mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM},\n\t\t{key: \"ATL.dimSight\", value: 0, mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM},\n\t\t{key: \"flags.midi-qol.grants.advantage.attack.all\", value: 1, mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM},\n\t\t{key: \"flags.midi-qol.disadvantage.attack.all\", value: 1, mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM},\n\t],\n\t\"duration\": {rounds: 10},\n\ttransfer: true,\n};\n\nconst Charmed = {\n\tlabel: \"Charmed\",\n\ticon: \"icons/svg/heal.svg\",\n\tchanges: [\n\t\t{key: \"StatusEffect\", value: \"Marked\", mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM},\n\t],\n\t\"duration\": {rounds: 10},\n\ttransfer: true,\n};\n\nconst Deafened = {\n\tlabel: \"Deafened\",\n\ticon: \"icons/svg/deaf.svg\",\n\tchanges: [\n\t\t{key: \"StatusEffect\", value: \"Deaf\", mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM},\n\t],\n\t\"duration\": {rounds: 10},\n\ttransfer: true,\n};\n\nconst Frightened = {\n\tlabel: \"Frightened\",\n\ticon: \"icons/svg/terror.svg\",\n\tchanges: [\n\t\t{key: \"StatusEffect\", value: \"Frightened\", mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM},\n\t\t{key: \"flags.midi-qol.disadvantage.attack.all\", value: 1, mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM},\n\t\t{key: \"flags.midi-qol.disadvantage.ability.all\", value: 1, mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM},\n\t],\n\t\"duration\": {rounds: 10},\n\ttransfer: true,\n};\n\nconst Grappled = {\n\tlabel: \"Grappled\",\n\ticon: \"icons/svg/net.svg\",\n\tchanges: [\n\t\t{key: \"StatusEffect\", value: \"Restrained\", mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM},\n\t\t{key: \"data.attributes.movement.all\", value: 0, mode: CONST.ACTIVE_EFFECT_MODES.OVERRIDE},\n\t\t{key: \"flags.midi-qol.disadvantage.attack.all\", value: 1, mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM},\n\t],\n\t\"duration\": {rounds: 10},\n\ttransfer: true,\n};\n\nconst Paralyzed = {\n\tlabel: \"Paralyzed\",\n\ticon: \"icons/svg/paralysis.svg\",\n\tchanges: [\n\t\t{key: \"StatusEffect\", value: \"Paralyzed\", mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM},\n\t\t{key: \"data.attributes.movement.all\", value: 0, mode: CONST.ACTIVE_EFFECT_MODES.OVERRIDE},\n\t\t{key: \"flags.midi-qol.fail.ability.save.str\", value: 1, mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM},\n\t\t{key: \"flags.midi-qol.fail.ability.save.dex\", value: 1, mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM},\n\t\t{key: \"flags.midi-qol.grants.advantage.attack.all\", value: 1, mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM},\n\t\t{key: \"flags.midi-qol.grants.critical.mwak\", value: 1, mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM},\n\t\t{key: \"flags.midi-qol.grants.critical.msak\", value: 1, mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM},\n\t],\n\t\"duration\": {rounds: 10},\n\ttransfer: true,\n};\n\nconst Petrified = {\n\tlabel: \"Petrified\",\n\ticon: \"icons/svg/paralysis.svg\",\n\tchanges: [\n\t\t{key: \"StatusEffect\", value: \"Paralyzed\", mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM},\n\t\t{key: \"data.attributes.movement.all\", value: 0, mode: CONST.ACTIVE_EFFECT_MODES.OVERRIDE},\n\t\t{key: \"flags.midi-qol.grants.advantage.attack.all\", value: 1, mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM},\n\t\t{key: \"flags.midi-qol.fail.ability.save.str\", value: 1, mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM},\n\t\t{key: \"flags.midi-qol.fail.ability.save.str\", value: 1, mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM},\n\t\t{key: \"data.traits.dr.all\", value: 1, mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM},\n\t\t{key: \"data.traits.ci.value\", value: \"Diseased\", mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM},\n\t\t{key: \"data.traits.ci.value\", value: \"Poisoned\", mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM},\n\t],\n\t\"duration\": {rounds: 10},\n\ttransfer: true,\n};\n\nconst Poisoned = {\n\tlabel: \"Poisoned\",\n\ticon: \"icons/svg/poison.svg\",\n\tchanges: [\n\t\t{key: \"StatusEffect\", value: \"Poisoned\", mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM},\n\t\t{key: \"flags.midi-qol.disadvantage.attack.all\", value: 1, mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM},\n\t\t{key: \"flags.midi-qol.disadvantage.ability.check.all\", value: 1, mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM},\n\t],\n\t\"duration\": {rounds: 10},\n\ttransfer: true,\n};\n\nconst Prone = {\n\tlabel: \"Prone\",\n\ticon: \"icons/svg/falling.svg\",\n\tchanges: [\n\t\t{key: \"StatusEffect\", value: \"Prone\", mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM},\n\t\t{key: \"flags.midi-qol.disadvantage.attack.all\", value: 1, mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM},\n\t\t{key: \"flags.midi-qol.grants.advantage.attack.mwak\", value: 1, mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM},\n\t\t{key: \"flags.midi-qol.grants.advantage.attack.msak\", value: 1, mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM},\n\t\t{key: \"flags.midi-qol.grants.disadvantage.attack.rwak\", value: 1, mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM},\n\t\t{key: \"flags.midi-qol.grants.disadvantage.attack.rsak\", value: 1, mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM},\n\t],\n\t\"duration\": {rounds: 10},\n\ttransfer: true,\n};\n\nconst Restrained = {\n\tlabel: \"Restrained\",\n\ticon: \"icons/svg/net.svg\",\n\tchanges: [\n\t\t{key: \"StatusEffect\", value: \"Restrained\", mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM},\n\t\t{key: \"data.attributes.movement.all\", value: 0, mode: CONST.ACTIVE_EFFECT_MODES.OVERRIDE},\n\t\t{key: \"flags.midi-qol.grants.advantage.attack.all\", value: 1, mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM},\n\t\t{key: \"flags.midi-qol.disadvantage.attack.all\", value: 1, mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM},\n\t\t{key: \"flags.midi-qol.disadvantage.ability.save.dex\", value: 1, mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM},\n\t],\n\t\"duration\": {rounds: 10},\n\ttransfer: true,\n};\n\nconst Stunned = {\n\tlabel: \"Stunned\",\n\ticon: \"icons/svg/daze.svg\",\n\tchanges: [\n\t\t{key: \"StatusEffect\", value: \"Stunned\", mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM},\n\t\t{key: \"data.attributes.movement.all\", value: 0, mode: CONST.ACTIVE_EFFECT_MODES.OVERRIDE},\n\t\t{key: \"flags.midi-qol.fail.ability.save.str\", value: 1, mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM},\n\t\t{key: \"flags.midi-qol.fail.ability.save.dex\", value: 1, mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM},\n\t\t{key: \"flags.midi-qol.grants.advantage.attack.all\", value: 1, mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM},\n\t],\n\t\"duration\": {rounds: 10},\n\ttransfer: true,\n};\n\nconst Unconscious = {\n\tlabel: \"Unconscious\",\n\ticon: \"icons/svg/unconscious.svg\",\n\tchanges: [\n\t\t{key: \"StatusEffect\", value: \"Unconscious\", mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM},\n\t\t{key: \"data.attributes.movement.all\", value: 0, mode: CONST.ACTIVE_EFFECT_MODES.OVERRIDE},\n\t\t{key: \"flags.midi-qol.disadvantage.attack.all\", value: 1, mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM},\n\t\t{key: \"flags.midi-qol.grants.advantage.attack.all\", value: 1, mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM},\n\t\t{key: \"flags.midi-qol.grants.disadvantage.attack.rwak\", value: 1, mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM},\n\t\t{key: \"flags.midi-qol.grants.disadvantage.attack.rsak\", value: 1, mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM},\n\t\t{key: \"flags.midi-qol.fail.ability.save.str\", value: 1, mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM},\n\t\t{key: \"flags.midi-qol.fail.ability.save.dex\", value: 1, mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM},\n\t\t{key: \"flags.midi-qol.grants.critical.mwak\", value: 1, mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM},\n\t\t{key: \"flags.midi-qol.grants.critical.msak\", value: 1, mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM},\n\t],\n\t\"duration\": {rounds: 10},\n\ttransfer: true,\n};\n\nlet d = new Dialog({\n    title: 'Apply Condition',\n    content: `\n<form>\n    <fieldset>\n        <legend>Choose conditions to apply</legend>\n        <div>\n            <input type=\"checkbox\" id=\"Blind\" name=\"Effects\" value=\"Blind\">\n            <label for=\"Blind\">Blind</label>\n        </div>\n        <div>\n            <input type=\"checkbox\" id=\"Charmed\" name=\"Effects\" value=\"Charmed\">\n            <label for=\"Charmed\">Charmed</label>\n        </div>\n        <div>\n            <input type=\"checkbox\" id=\"Deafened\" name=\"Effects\" value=\"Deafened\">\n            <label for=\"Deafened\">Deafened</label>\n        </div>\n        <div>\n            <input type=\"checkbox\" id=\"Frightened\" name=\"Effects\" value=\"Frightened\">\n            <label for=\"Frightened\">Frightened</label>\n        </div>\n        <div>\n            <input type=\"checkbox\" id=\"Grappled\" name=\"Effects\" value=\"Grappled\">\n            <label for=\"Grappled\">Grappled</label>\n        </div>\n        <div>\n            <input type=\"checkbox\" id=\"Paralyzed\" name=\"Effects\" value=\"Paralyzed\">\n            <label for=\"Paralyzed\">Paralyzed</label>\n        </div>\n        <div>\n            <input type=\"checkbox\" id=\"Petrified\" name=\"Effects\" value=\"Petrified\">\n            <label for=\"Petrified\">Petrified</label>\n        </div>\n        <div>\n            <input type=\"checkbox\" id=\"Poisoned\" name=\"Effects\" value=\"Poisoned\">\n            <label for=\"Poisoned\">Poisoned</label>\n        </div>\n        <div>\n            <input type=\"checkbox\" id=\"Prone\" name=\"Effects\" value=\"Prone\">\n            <label for=\"Prone\">Prone</label>\n        </div>\n        <div>\n            <input type=\"checkbox\" id=\"Restrained\" name=\"Effects\" value=\"Restrained\">\n            <label for=\"Restrained\">Restrained</label>\n        </div>\n        <div>\n            <input type=\"checkbox\" id=\"Stunned\" name=\"Effects\" value=\"Stunned\">\n            <label for=\"Stunned\">Stunned</label>\n        </div>\n        <div>\n            <input type=\"checkbox\" id=\"Unconscious\" name=\"Effects\" value=\"Unconscious\">\n            <label for=\"Unconscious\">Unconscious</label>\n        </div>\n    </fieldset>\n</form>\n`,\n    buttons: {\n        cast: {\n            icon: \"<i class='fas fa-check'></i>\",\n            label: `Cast Spell`,\n        }\n    },\n    close: html => {\n        let EFFECTS = []\n        if (html.find('[id=\"Blind\"]')[0].checked) {\n\t\t\tEFFECTS.push(Blind)\n\t\t}\n        if (html.find('[id=\"Charmed\"]')[0].checked) {\n\t\t\tEFFECTS.push(Charmed)\n\t\t}\n        if (html.find('[id=\"Deafened\"]')[0].checked) {\n\t\t\tEFFECTS.push(Deafened)\n\t\t}\n        if (html.find('[id=\"Frightened\"]')[0].checked) {\n\t\t\tEFFECTS.push(Frightened)\n\t\t}\n        if (html.find('[id=\"Grappled\"]')[0].checked) {\n\t\t\tEFFECTS.push(Grappled)\n\t\t}\n        if (html.find('[id=\"Paralyzed\"]')[0].checked) {\n\t\t\tEFFECTS.push(Paralyzed)\n\t\t}\n        if (html.find('[id=\"Petrified\"]')[0].checked) {\n\t\t\tEFFECTS.push(Petrified)\n\t\t}\n        if (html.find('[id=\"Poisoned\"]')[0].checked) {\n\t\t\tEFFECTS.push(Poisoned)\n\t\t}\n        if (html.find('[id=\"Prone\"]')[0].checked) {\n\t\t\tEFFECTS.push(Prone)\n\t\t}\n        if (html.find('[id=\"Restrained\"]')[0].checked) {\n\t\t\tEFFECTS.push(Restrained)\n\t\t}\n        if (html.find('[id=\"Stunned\"]')[0].checked) {\n\t\t\tEFFECTS.push(Stunned)\n\t\t}\n        if (html.find('[id=\"Unconscious\"]')[0].checked) {\n\t\t\tEFFECTS.push(Unconscious)\n\t\t}\n\t\tlet tokens = canvas.tokens.controlled;\n\t\tfor (var i = 0; i < tokens.length; i++) {\n\t\t\ttokens[i].actor.createEmbeddedDocuments(\"ActiveEffect\", EFFECTS);\n\t\t}\n        return;\n    },\n\n}).render(true)","folder":null,"sort":0,"flags":{"advanced-macros":{"runAsGM":false},"core":{"sourceId":"Macro.iViN1Mgk7XhN2Opz"}},"_id":"PbH7eA7Xxq78VWxg","ownership":{"default":0,"ODc5MmQ1Y2RhY2M3":3},"_stats":{"systemId":"dnd5e","systemVersion":"2.0.2","coreVersion":"10.284","createdTime":null,"modifiedTime":1662565232654,"lastModifiedBy":"xVCVzNPUKcRx8Gf2"}}
{"name":"Enlarge-Reduce","type":"script","author":"ODc5MmQ1Y2RhY2M3","img":"icons/svg/up.svg","scope":"global","command":"//#args 0=tokenId 1 = sceneId\nlet enlarge = args[0] === \"on\";\nlet t = canvas.tokens.get(args[1])\n\nnew Dialog({\n  title: \"Enlarge/Reduce\",\n  content: \"Enlarge or Reduce Target?\",\n  buttons: {\n    button1: {\n      label: \"Enlarge\",\n      callback: () => {canvas.scene.updateEmbeddedDocuments(\"Token\", [{\"_id\": args[1], \"height\": (t.document.height + 1), \"width\": (t.document.width + 1)}])},\n    },\n    button2: {\n      label: \"Reduce\",\n      callback: () => {canvas.scene.updateEmbeddedDocuments(\"Token\", [{\"_id\": args[1], \"height\": (t.document.height - 1), \"width\": (t.document.width - 1)}])},\n    }\n  }\n}).render(true);","folder":null,"sort":0,"flags":{"advanced-macros":{"runAsGM":false},"core":{"sourceId":"Macro.EgIueSaKWDVAz3Oy"}},"_id":"RwEE2BkD3OBL5Bki","ownership":{"default":0,"ODc5MmQ1Y2RhY2M3":3},"_stats":{"systemId":"dnd5e","systemVersion":"2.0.2","coreVersion":"10.284","createdTime":null,"modifiedTime":1662565243911,"lastModifiedBy":"xVCVzNPUKcRx8Gf2"}}
{"name":"Update Actor/Items","type":"script","author":"ODc5MmQ1Y2RhY2M3","img":"icons/svg/dice-target.svg","scope":"global","command":"//loop over items\ngame.items.forEach(item => {\n\t//loop over actors\n\tgame.actors.forEach(async actor => {\n\t\t//loop over actors items\n\t\tactor.items.forEach(async a_items => {\n\t\t\t//check the description/ability/actionType to make sure its the same item\n\t\t\tif (a_items.name == item.name &&\n\t\t\t\ta_items.type == item.type &&\n\t\t\t\ta_items.system.ability == item.system.ability &&\n\t\t\t\ta_items.system.actionType == item.system.actionType &&\n\t\t\t\ta_items.system.weaponType == item.system.weaponType &&\n\t\t\t\ta_items.system.description.value == item.system.description.value) {\n\t\t\t\tconsole.log(\"update actor \" + actor.name + \" item: \" + a_items.name + \" with \" + item.name)\n\t\t\t\tawait actor.deleteEmbeddedDocuments(\"Item\", [a_items.id])\n\t\t\t\tawait actor.createEmbeddedDocuments(\"Item\", [item.toObject()])\n\t\t\t}\n\t\t})\n\t})\n})","folder":null,"sort":0,"flags":{"advanced-macros":{"runAsGM":true},"core":{"sourceId":"Macro.MP7HeKJlWfU8HJi6"}},"_id":"TbU3vMfLOIJrQn4c","ownership":{"default":0,"ODc5MmQ1Y2RhY2M3":3},"_stats":{"systemId":"dnd5e","systemVersion":"2.0.2","coreVersion":"10.284","createdTime":null,"modifiedTime":1662565301632,"lastModifiedBy":"xVCVzNPUKcRx8Gf2"}}
{"name":"Update Tokens","type":"script","author":"ODc5MmQ1Y2RhY2M3","img":"icons/svg/mystery-man.svg","scope":"global","command":"const unlinked = canvas.scene.tokens.map(t => {\n    const actor = game.actors.find(a => a.name.includes(t.name));\n    if (actor) {\n        return {\n            _id: t.id,\n            actorId: actor.id\n        }\n    } else { // this may include actors who's actor name is not the same as the token name (see Starter Heroes)\n        console.log(t.name);\n        return {\n            _id: t.id,\n            actorId: \"\"\n        }\n    }\n});\nconst updates = duplicate(unlinked);\ncanvas.scene.updateEmbeddedDocuments(\"Token\", updates);\n\n\nconst tokens = game.canvas.tokens.placeables.map(token => {\n\tvar updates = {\n\t\t_id: token.id,\n\t\t\"bar1.attribute\": \"attributes.hp\",\n\t\t\"bar2.attribute\": \"attributes.ac.value\",\n\t\t\"displayName\": CONST.TOKEN_DISPLAY_MODES.NONE,\n\t\t\"displayName\": CONST.TOKEN_DISPLAY_MODES.NONE,\n\t\tvision: true\n\t}\n\tif (!token.actor.hasPlayerOwner) {\n\t\tupdates[\"displayName\"] = CONST.TOKEN_DISPLAY_MODES.OWNER_HOVER\n\t\tupdates[\"displayName\"] = CONST.TOKEN_DISPLAY_MODES.OWNER_HOVER\n\t}\n\tif (token.actor.hasPlayerOwner) {\n\t\tupdates[\"displayName\"] = CONST.TOKEN_DISPLAY_MODES.HOVER\n\t\tupdates[\"displayBars\"] = CONST.TOKEN_DISPLAY_MODES.ALWAYS\n\t}\n\treturn updates\n});\ncanvas.scene.updateEmbeddedDocuments('Token', tokens)","folder":null,"sort":0,"flags":{"furnace":{"runAsGM":true},"advanced-macros":{"runAsGM":false},"core":{"sourceId":"Macro.NrhybFJAcuM96IDm"}},"_id":"Tbkz9cyarq4fXrTs","ownership":{"default":0,"ODc5MmQ1Y2RhY2M3":3},"_stats":{"systemId":"dnd5e","systemVersion":"2.0.2","coreVersion":"10.284","createdTime":null,"modifiedTime":1662565309330,"lastModifiedBy":"xVCVzNPUKcRx8Gf2"}}
{"name":"Summon","type":"script","author":"ODc5MmQ1Y2RhY2M3","img":"icons/svg/door-exit.svg","scope":"global","command":"let t = canvas.tokens.get(args[1])\nlet targetScene = game.scenes.get(args[2])\nlet new_t = game.actors.getName(args[3])\nawait targetScene.createEmbeddedDocuments('Token', mergeObject(new_t.data, { \"x\": t.x || 0, \"y\": t.y || 0}, { overwrite: true, inplace: true }));","folder":null,"sort":0,"flags":{"advanced-macros":{"runAsGM":false},"core":{"sourceId":"Macro.wy5Ea141yu8Bjk5L"}},"_id":"oLSslDmzlsxq1urH","ownership":{"default":0,"ODc5MmQ1Y2RhY2M3":3},"_stats":{"systemId":"dnd5e","systemVersion":"2.0.2","coreVersion":"10.284","createdTime":null,"modifiedTime":1662565292433,"lastModifiedBy":"xVCVzNPUKcRx8Gf2"}}
{"name":"Invisibility","type":"script","author":"ODc5MmQ1Y2RhY2M3","img":"icons/svg/blind.svg","scope":"global","command":"//#args 0=tokenId 1 = sceneId\nlet hide = args[0] === \"on\";\nscene.updateEmbeddedDocuments(\"Token\", [{\"_id\": args[1], \"hidden\": hide}])","folder":null,"sort":0,"flags":{"furnace":{"gmexecute":true,"runAsGM":true},"combat-utility-belt":{"macroTrigger":""},"core":{"sourceId":"Compendium.dae.sample-macros.oWh4uTrugSY4uEdi"}},"_id":"zAzHnzqcCYEuPnY2","ownership":{"default":0,"devnIbfBHb74U9Zv":3,"ODc5MmQ1Y2RhY2M3":3},"_stats":{"systemId":"dnd5e","systemVersion":"2.0.2","coreVersion":"10.284","createdTime":null,"modifiedTime":1662565252606,"lastModifiedBy":"xVCVzNPUKcRx8Gf2"}}
