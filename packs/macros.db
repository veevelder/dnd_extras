{"name":"Toggle Light","permission":{"default":0,"y5gmtwxmW3A5ZuOP":3},"type":"script","flags":{},"scope":"global","command":"(async () => {\nlet token = null;\nif(game.user.isGM) {\nif(canvas.tokens.controlled.length == 1) {\ntoken = canvas.tokens.controlled[0];\n}\nelse {\nreturn ui.notifications.error(\"Only select one token at a time!\");\n}\n}\nelse {\nif(canvas.tokens.controlled.length == 1) {\nif(game.user.charname == canvas.tokens.controlled[0].name) {\ntoken = canvas.tokens.controlled[0];\n}\nelse {\nui.notifications.error(\"You can only change your own token!\");\nreturn;\n}\n}\nelse {\nui.notifications.error(\"You must select your token!\");\nreturn;\n}\n}\nif(token) {\nlet candle = token.actor.items.find(x => x.name == \"Candle\");\nlet oil = token.actor.items.find(x => x.name == \"Oil Flask\");\nlet lamp = token.actor.items.find(x => x.name == \"Lamp\");\nlet bullseye = token.actor.items.find(x => x.name == \"Bullseye Lantern\");\nlet hooded = token.actor.items.find(x => x.name == \"Hooded Lantern\");\nlet torch = token.actor.items.find(x => x.name == \"Torch\");\nif(token.hasLight) {\nasync function offLight() {\ntoken.hasLight = \"\";\n// Update Token\ntoken.update({\nvision: true,\ndimLight: 0,\nbrightLight:  0,\nlightAngle: 360,\nlockRotation: 0\n});\n\n}\nlet d = Dialog.confirm({\ntitle: \"Turn off Light Source?\",\ncontent: \"<p>Turn off the current light source (\" + token.hasLight + \") for this token?</p>\",\nyes: () => offLight()\n});\n}\nelse {\nlet options = \"\";\nif (candle) options += \"<option value='candle'>Candle</option>\";\nif (lamp) options += \"<option value='lamp'>Lamp</option>\";\nif (bullseye) options += \"<option value='bullseye'>Lantern (Bullseye)</option>\";\nif (hooded) option += \"<option value='hooded-dim'>Lantern (Hooded - Dim)</option><option value='hooded-bright'>Lantern (Hooded - Bright)</option>\";\nif (torch) options += \"<option value='torch'>Torch</option>\";\nlet applyChanges = false;\nnew Dialog({\ntitle: token.name + ` Vision Configuration`,\ncontent: `\n<form>\n<div class=\"form-group\">\n<label>Halved Vision?</label><input type=\"checkbox\" id=\"halved-vision\">\n</div>\n<div class=\"form-group\">\n<label>Light Source:</label>\n<select id=\"light-source\" name=\"light-source\">` + options + `</select>\n</div>\n</form>`,\nbuttons: {\nyes: {\nicon: \"<i class='fas fa-check'></i>\",\nlabel: `Apply Changes`,\ncallback: () => applyChanges = true\n},\nno: {\nicon: \"<i class='fas fa-times'></i>\",\nlabel: `Cancel Changes`\n},\n},\ndefault: \"yes\",\nclose: html => {\nif (applyChanges) {\nlet dimSight = 0;\nlet brightSight = 0;\nlet dimLight = token.data.dimLight;\nlet brightLight = token.data.brightLight;\nlet lightAngle = token.data.lightAngle;\nlet lockRotation = token.data.lockRotation;if(token.actor.data.data.traits.senses.includes(\"darkvision 30 ft.\")) {\ndimSight = 30;\nbrightSight = 0;\n}\nelse if(token.actor.data.data.traits.senses.includes(\"darkvision 60 ft.\")) {\ndimSight = 60;\nbrightSight = 0;\n}\nelse if(token.actor.data.data.traits.senses.includes(\"darkvision 90 ft.\")) {\ndimSight = 90;\nbrightSight = 0;\n}\nelse if(token.actor.data.data.traits.senses.includes(\"darkvision 120 ft.\")) {\ndimSight = 120;\nbrightSight = 0;\n}\nelse if(token.actor.data.data.traits.senses.includes(\"darkvision 150 ft.\")) {\ndimSight = 150;\nbrightSight = 0;\n}\nelse if(token.actor.data.data.traits.senses.includes(\"darkvision 180 ft.\")) {\ndimSight = 180;\nbrightSight = 0;\n}\nelse if(token.actor.data.data.traits.senses.includes(\"Devil's Sight\")) {\ndimSight = 0;\nbrightSight= 120;\n}\nelse {\ndimSight = 0;\nbrightSight = 0;\n}\nlet halved = html.find('#halved-vision')[0].checked;\nlet lightSource = html.find('[name=\"light-source\"]')[0].value || \"none\";\ntoken.hasLight = lightSource;\n// Get Light Source Values\nswitch (lightSource) {\ncase \"candle\":\nif(candle) {\nif(candle.data.data.quantity != 0) {\ncandle.rollConsumable();\ndimLight = 10;\nif (halved) dimLight = 5;\nbrightLight = 5;\n}\nelse {\nreturn ui.notifications.error(\"The token does not have any Candles to light\")\n}\n}\nelse {\nreturn ui.notifications.error(\"The token does not have any Candles to light\");\n}\nbreak;\ncase \"lamp\":\nif(lamp && oil) {\nif(oil.data.data.quantity != 0) {\noil.rollConsumable();\ndimLight = 45;\nbrightLight = 15;\nif (halved) {\ndimLight = 25;\nbrightLight = 5;\n}\n}\nelse {\nreturn ui.notifications.error(\"The token does not have any oil to light the Lamp with\");\n}\n}\nelse {\nreturn ui.notifications.error(\"The token does not have a Lamp to light\");\n}\nbreak;\ncase \"bullseye\":\nif(bullseye && oil) {\nif(oil.data.data.quantity != 0) {\noil.rollConsumable();\ndimLight = 120;\nbrightLight = 60;\nlockRotation = false;\nlightAngle = 52.5;\nif (halved) {\ndimLight = 60;\nbrightLight = 30;\n}\n}\nelse {\nreturn ui.notifications.error(\"The token does not have any oil to light the Bullseye Lantern with\");\n}\n}\nelse {\nreturn ui.notifications.error(\"The token does not have a Bullseye Lantern to light\");\n}break;\ncase \"hooded-dim\":\nif(hooded) {\ndimLight = 5;\nbrightLight = 0;\n}\nelse {\nreturn ui.notifications.error(\"The token does not have a Hooded Lantern to light\");\n}\nbreak;\ncase \"hooded-bright\":if (hooded && oil) {\nif(oil.data.data.quantity != 0) {\noil.rollConsumable();\ndimLight = 60;\nbrightLight = 30;\nif (halved) {\ndimLight = 30;\nbrightLight = 15;\n}\n}\nelse {\nreturn ui.notifications.error(\"The token does not have any oil to light the Hooded Lantern with\");\n}\n}\nelse {\nreturn ui.notifications.error(\"The token does not have a Hooded Lantern to light\");\n}\nbreak;\ncase \"torch\":\nif(torch) {\nif(torch.data.data.quantity != 0) {\ntorch.rollConsumable();\ndimLight = 40;\nbrightLight = 20;\nif (halved) {\ndimLight = 20;\nbrightLight = 10;\n}\n}\nelse {\nreturn ui.notifications.error(\"The token does not have any Torchs to light\");\n}\n}\nelse return ui.notifications.error(\"The token does not have a Torch to light\");\n\nbreak;\n}\nif (halved) {\nChatMessage.create({\nuser: game.user._id,\ncontent: \"<p>Something in your environment is obscuring your vision, you can only see half the distance you would normally see.</p>\",\ntype: CONST.CHAT_MESSAGE_TYPES.OTHER\n}, {});\n}\n// Update Token\ntoken.update({\nvision: true,\ndimSight: dimSight,\nbrightSight: brightSight,\ndimLight: dimLight,\nbrightLight:  brightLight,\nlightAngle: lightAngle,\nlockRotation: lockRotation\n});\n}\n}\n}).render(true);\n}\n}\nelse return ui.notifications.error(\"No Token Selected\");\n}\n})();","author":"y5gmtwxmW3A5ZuOP","img":"icons/svg/eye.svg","actorIds":[],"_id":"IfqDJymxgNfhepiY"}
{"name":"Toggle Combat","permission":{"default":0,"y5gmtwxmW3A5ZuOP":3},"type":"script","flags":{},"scope":"global","command":"(async () => {\nif (game.combat) {\nasync function endCombat() {\n//get exp\nlet exp = 0;\nlet defeated = [];\ngame.combat.combatants.filter(x => x.players.length == 0).filter(x => x.css.includes(\"defeated\")).forEach(function(a) { exp += a.actor.data.data.details.xp.value; defeated.push(a.name); });\nexp = Math.round(exp / game.combat.combatants.filter(x => x.players.length > 0).length);\ngame.playlists.entities.find(data => data.name == \"Combat\").stopAll();\ngame.combat.delete();\nif (exp != 0 ) {\nChatMessage.create({\nuser: game.user._id,\ncontent: \"<p>For defeating <strong>\" + defeated.join(\", \") + \"</strong> each of you get <strong>\" + exp + \"</strong> experience!</p>\",\ntype: CONST.CHAT_MESSAGE_TYPES.OTHER\n}, {});\n}\nif(CONFIG[\"OldPlaylist\"]) {\nCONFIG[\"OldPlaylist\"].forEach(function(a) {a.playAll()});\nCONFIG[\"OldPlaylist\"] = null;\n}\n}\nlet d = Dialog.confirm({\ntitle: \"End Combat Encounter?\",\ncontent: \"<p>End this combat encounter and empty the turn tracker?</p>\",\nyes: () => endCombat()\n});\n}\nelse {\nif (canvas.tokens.controlled.length === 0) {\nui.notifications.error(\"You must select at least one or more tokens on the map before starting combat.\");\n}\nelse {\nasync function start() {\nfor (let token of canvas.tokens.controlled) {      \nif (token.inCombat === false){\nawait token.toggleCombat().then(() => game.combat.rollAll(null, {rollMode: 'gmroll'}));\n}\n}\n}\nstart().then(function() {\n//save the currently playing playlist\nCONFIG[\"OldPlaylist\"] = game.playlists.playing\nasync function stopAll() {\ngame.playlists.playing.forEach(function(playing) {playing.stopAll()});\n}\nstopAll().then(function() {\nlet _combat = game.playlists.entities.find(data => data.name == \"Combat\");\nlet _music = _combat.sounds[Math.floor(Math.random() * _combat.sounds.length)];\nlet audio = _combat.audio[_music._id];\nif (!_music.playing) {\nasync function load() {\nif (audio.howl.state() !== \"loaded\")audio.howl.load();\n}\nload().then(function() {\naudio.id = audio.howl.play(audio.id);\naudio.howl.volume(_music.volume * game.settings.get(\"core\", \"globalPlaylistVolume\"), audio.id);\naudio.howl.loop(_music.repeat, audio.id);\n_music.playing = true;\n});\n}\n});\ngame.combat.startCombat();\n});\n}\n}\n})();","author":"y5gmtwxmW3A5ZuOP","img":"icons/svg/combat.svg","actorIds":[],"_id":"UDFnzUKwFmh714Gw"}