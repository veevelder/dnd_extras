{"name":"Toggle Light","permission":{"default":0,"y5gmtwxmW3A5ZuOP":3},"type":"script","flags":{},"scope":"global","command":"(async () => {\nlet token = null;\nif(game.user.isGM) {\nif(canvas.tokens.controlled.length == 1) {\ntoken = canvas.tokens.controlled[0];\n}\nelse {\nreturn ui.notifications.error(\"Only select one token at a time!\");\n}\n}\nelse {\nif(canvas.tokens.controlled.length == 1) {\nif(game.user.charname == canvas.tokens.controlled[0].name) {\ntoken = canvas.tokens.controlled[0];\n}\nelse {\nui.notifications.error(\"You can only change your own token!\");\nreturn;\n}\n}\nelse {\nui.notifications.error(\"You must select your token!\");\nreturn;\n}\n}\nif(token) {\nlet candle = token.actor.items.find(x => x.name == \"Candle\");\nlet oil = token.actor.items.find(x => x.name == \"Oil Flask\");\nlet lamp = token.actor.items.find(x => x.name == \"Lamp\");\nlet bullseye = token.actor.items.find(x => x.name == \"Bullseye Lantern\");\nlet hooded = token.actor.items.find(x => x.name == \"Hooded Lantern\");\nlet torch = token.actor.items.find(x => x.name == \"Torch\");\nif(token.hasLight) {\nasync function offLight() {\ntoken.hasLight = \"\";\n// Update Token\ntoken.update({\nvision: true,\ndimLight: 0,\nbrightLight:  0,\nlightAngle: 360,\nlockRotation: 0\n});\n\n}\nlet d = Dialog.confirm({\ntitle: \"Turn off Light Source?\",\ncontent: \"<p>Turn off the current light source (\" + token.hasLight + \") for this token?</p>\",\nyes: () => offLight()\n});\n}\nelse {\nlet options = \"\";\nif (candle) options += \"<option value='candle'>Candle</option>\";\nif (lamp) options += \"<option value='lamp'>Lamp</option>\";\nif (bullseye) options += \"<option value='bullseye'>Lantern (Bullseye)</option>\";\nif (hooded) option += \"<option value='hooded-dim'>Lantern (Hooded - Dim)</option><option value='hooded-bright'>Lantern (Hooded - Bright)</option>\";\nif (torch) options += \"<option value='torch'>Torch</option>\";\nlet applyChanges = false;\nnew Dialog({\ntitle: token.name + ` Vision Configuration`,\ncontent: `\n<form>\n<div class=\"form-group\">\n<label>Halved Vision?</label><input type=\"checkbox\" id=\"halved-vision\">\n</div>\n<div class=\"form-group\">\n<label>Light Source:</label>\n<select id=\"light-source\" name=\"light-source\">` + options + `</select>\n</div>\n</form>`,\nbuttons: {\nyes: {\nicon: \"<i class='fas fa-check'></i>\",\nlabel: `Apply Changes`,\ncallback: () => applyChanges = true\n},\nno: {\nicon: \"<i class='fas fa-times'></i>\",\nlabel: `Cancel Changes`\n},\n},\ndefault: \"yes\",\nclose: html => {\nif (applyChanges) {\nlet dimSight = 0;\nlet brightSight = 0;\nlet dimLight = token.data.dimLight;\nlet brightLight = token.data.brightLight;\nlet lightAngle = token.data.lightAngle;\nlet lockRotation = token.data.lockRotation;if(token.actor.data.data.traits.senses.includes(\"darkvision 30 ft.\")) {\ndimSight = 30;\nbrightSight = 0;\n}\nelse if(token.actor.data.data.traits.senses.includes(\"darkvision 60 ft.\")) {\ndimSight = 60;\nbrightSight = 0;\n}\nelse if(token.actor.data.data.traits.senses.includes(\"darkvision 90 ft.\")) {\ndimSight = 90;\nbrightSight = 0;\n}\nelse if(token.actor.data.data.traits.senses.includes(\"darkvision 120 ft.\")) {\ndimSight = 120;\nbrightSight = 0;\n}\nelse if(token.actor.data.data.traits.senses.includes(\"darkvision 150 ft.\")) {\ndimSight = 150;\nbrightSight = 0;\n}\nelse if(token.actor.data.data.traits.senses.includes(\"darkvision 180 ft.\")) {\ndimSight = 180;\nbrightSight = 0;\n}\nelse if(token.actor.data.data.traits.senses.includes(\"Devil's Sight\")) {\ndimSight = 0;\nbrightSight= 120;\n}\nelse {\ndimSight = 0;\nbrightSight = 0;\n}\nlet halved = html.find('#halved-vision')[0].checked;\nlet lightSource = html.find('[name=\"light-source\"]')[0].value || \"none\";\ntoken.hasLight = lightSource;\n// Get Light Source Values\nswitch (lightSource) {\ncase \"candle\":\nif(candle) {\nif(candle.data.data.quantity != 0) {\ncandle.rollConsumable();\ndimLight = 10;\nif (halved) dimLight = 5;\nbrightLight = 5;\n}\nelse {\nreturn ui.notifications.error(\"The token does not have any Candles to light\")\n}\n}\nelse {\nreturn ui.notifications.error(\"The token does not have any Candles to light\");\n}\nbreak;\ncase \"lamp\":\nif(lamp && oil) {\nif(oil.data.data.quantity != 0) {\noil.rollConsumable();\ndimLight = 45;\nbrightLight = 15;\nif (halved) {\ndimLight = 25;\nbrightLight = 5;\n}\n}\nelse {\nreturn ui.notifications.error(\"The token does not have any oil to light the Lamp with\");\n}\n}\nelse {\nreturn ui.notifications.error(\"The token does not have a Lamp to light\");\n}\nbreak;\ncase \"bullseye\":\nif(bullseye && oil) {\nif(oil.data.data.quantity != 0) {\noil.rollConsumable();\ndimLight = 120;\nbrightLight = 60;\nlockRotation = false;\nlightAngle = 52.5;\nif (halved) {\ndimLight = 60;\nbrightLight = 30;\n}\n}\nelse {\nreturn ui.notifications.error(\"The token does not have any oil to light the Bullseye Lantern with\");\n}\n}\nelse {\nreturn ui.notifications.error(\"The token does not have a Bullseye Lantern to light\");\n}break;\ncase \"hooded-dim\":\nif(hooded) {\ndimLight = 5;\nbrightLight = 0;\n}\nelse {\nreturn ui.notifications.error(\"The token does not have a Hooded Lantern to light\");\n}\nbreak;\ncase \"hooded-bright\":if (hooded && oil) {\nif(oil.data.data.quantity != 0) {\noil.rollConsumable();\ndimLight = 60;\nbrightLight = 30;\nif (halved) {\ndimLight = 30;\nbrightLight = 15;\n}\n}\nelse {\nreturn ui.notifications.error(\"The token does not have any oil to light the Hooded Lantern with\");\n}\n}\nelse {\nreturn ui.notifications.error(\"The token does not have a Hooded Lantern to light\");\n}\nbreak;\ncase \"torch\":\nif(torch) {\nif(torch.data.data.quantity != 0) {\ntorch.rollConsumable();\ndimLight = 40;\nbrightLight = 20;\nif (halved) {\ndimLight = 20;\nbrightLight = 10;\n}\n}\nelse {\nreturn ui.notifications.error(\"The token does not have any Torchs to light\");\n}\n}\nelse return ui.notifications.error(\"The token does not have a Torch to light\");\n\nbreak;\n}\nif (halved) {\nChatMessage.create({\nuser: game.user._id,\ncontent: \"<p>Something in your environment is obscuring your vision, you can only see half the distance you would normally see.</p>\",\ntype: CONST.CHAT_MESSAGE_TYPES.OTHER\n}, {});\n}\n// Update Token\ntoken.update({\nvision: true,\ndimSight: dimSight,\nbrightSight: brightSight,\ndimLight: dimLight,\nbrightLight:  brightLight,\nlightAngle: lightAngle,\nlockRotation: lockRotation\n});\n}\n}\n}).render(true);\n}\n}\nelse return ui.notifications.error(\"No Token Selected\");\n}\n})();","author":"y5gmtwxmW3A5ZuOP","img":"icons/svg/eye.svg","actorIds":[],"_id":"IfqDJymxgNfhepiY"}
{"_id":"UDFnzUK1d8J714Gw","name":"Princes of the Apocalypse Random Encounters","permission":{"default":0,"y5gmtwxmW3A5ZuOP":3},"type":"script","flags":{},"scope":"global","command":"let message = \"The party has come across an <b>Encounter</b> \";\r\n\r\nfunction printMessage(message){\r\n\tlet chatData = {\r\n\t\tuser : game.user._id,\r\n\t\tcontent : \"<h2>Random Encounter</h2>\" + message,\r\n\t\twhisper : game.users.entities.filter(u => u.isGM).map(u => u._id)\r\n\t};\r\n\tChatMessage.create(chatData,{});\r\n}\r\n\r\nfunction printEncounter(result){\r\n\tif (result.text == \"None\"){\r\n\t\tmessage = \"No random encounter\";\r\n\t} else {\r\n\t\t//pause game if not already paused\r\n\t\tif(!game.paused) {\r\n\t\t\tgame.togglePause(true, true)\r\n\t\t}\r\n\t\t//play random encounter sound effect\r\n\t\tmessage += result.text;\r\n\t}\r\n\tprintMessage(message);\r\n}\r\n\r\n\r\nlet dessarin_valley = new Dialog({\r\n\ttitle: \"Check for Random Encounter\",\r\n\tcontent: \"Where to check for <b>Random Encounter</b>? During chapters 3 and 4 use the \\\"Early Travels\\\" random encounter table. During chapter 5 use the \\\"Later Travels\\\" table. At any point during travel on or very near the Dessarin River, use the \\\"River Travels\\\" table.\",\r\n\tbuttons:{\r\n\t\tearly:{\r\n\t\t\tlabel: \"Early Travels\",\r\n\t\t\tcallback: () => {\r\n\t\t\t\tmessage += \"in the <b>Early Travels</b> \";\r\n\t\t\t\tif(game.scenes.active.data.darkness == 0) {\r\n\t\t\t\t\tmessage += \"during the <b>Daytime</b>. \";\r\n\t\t\t\t\t//day time\r\n\t\t\t\t\tprintEncounter(game.tables.entities.find(t => t.name === \"DV-Early-Travels-Day\").roll().results[0]);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tmessage += \"during the <b>Nighttime</b>. \";\r\n\t\t\t\t\t//night time\r\n\t\t\t\t\tprintEncounter(game.tables.entities.find(t => t.name === \"DV-Early-Travels-Night\").roll().results[0]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t\triver:{\r\n\t\t\tlabel: \"River Travels\",\r\n\t\t\tcallback: () => {\r\n\t\t\t\tmessage += \"on the <b>River</b> \";\r\n\t\t\t\tprintEncounter(game.tables.entities.find(t => t.name === \"DV-River-Travels\").roll().results[0]);\r\n\t\t\t}\r\n\t\t},\r\n\t\tlater:{\r\n\t\t\tlabel: \"Later Travels\",\r\n\t\t\tcallback: () => {\r\n\t\t\t\tmessage += \"in the <b>Later Travels</b> \";\r\n\t\t\t\tif(game.scenes.active.data.darkness == 0) {\r\n\t\t\t\t\tmessage += \"during the <b>Daytime</b>. \";\r\n\t\t\t\t\t//day time\r\n\t\t\t\t\tprintEncounter(game.tables.entities.find(t => t.name === \"DV-Later-Travels-Day\").roll().results[0]);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tmessage += \"during the <b>Nighttime</b>. \";\r\n\t\t\t\t\t//night time\r\n\t\t\t\t\tprintEncounter(game.tables.entities.find(t => t.name === \"DV-Later-Travels-Night\").roll().results[0]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n})\r\n\r\nlet weeping_colossus = new Dialog({\r\n\ttitle: \"Check for Random Encounter\",\r\n\tcontent: \"For every 30 minutes the characters spend inside the Weeping Colossus, roll a d20 and consult the following table. In the medium intensity zone, roll a d20 and a d4, subtracting the d4 from the d20 roll. Use a d6 instead of a d4 in the high intensity zone.\",\r\n\tbuttons:{\r\n\t\tmedium:{\r\n\t\t\tlabel: \"Medium Heat Zone\",\r\n\t\t\tcallback: () => {\r\n\t\t\t\tmessage += \"in the <b>Medium Heat Zone</b> \";\r\n\t\t\t\tprintEncounter(game.tables.entities.find(t => t.name === \"WC-MediumHeat-Random-Encounters\").roll().results[0]);\r\n\t\t\t}\r\n\t\t},\r\n\t\thigh:{\r\n\t\t\tlabel: \"High Heat Zone\",\r\n\t\t\tcallback: () => {\r\n\t\t\t\tmessage += \"in the <b>High Heat Zone</b> \";\r\n\t\t\t\tprintEncounter(game.tables.entities.find(t => t.name === \"WC-HighHeat-Random-Encounters\").roll().results[0]);\r\n\t\t\t}\r\n\t\t},\r\n\t\tnone:{\r\n\t\t\tlabel: \"No Zone\",\r\n\t\t\tcallback: () => {\r\n\t\t\t\tmessage += \"in <b>No Zone</b> \";\r\n\t\t\t\tprintEncounter(game.tables.entities.find(t => t.name === \"WC-Random-Encounters\").roll().results[0]);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n})\r\n\r\nasync function checkRoom(pcs, x, y, w, h, table) {\r\n\tfor (var i = 0; i < pcs.length; i++) {\r\n\t\tlet t = await pcs[i].getActiveTokens()\r\n\t\tfor(var j = 0; j < t.length; j++) {\r\n\t\t\tif((t[j].x >= x && t[j].x <= w) && (t[j].y >= y && t[j].y <= h)) {\r\n\t\t\t\tprintEncounter(game.tables.entities.find(t => t.name === table).roll().results[0])\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\nlet pcs = game.actors.filter(a => a.isPC)\r\n\r\n//check if in correct scene to even get an encounter\r\nswitch(game.scenes.active.data.name) {\r\n\tcase \"Temple of Black Earth\":\r\n\t\t//tokens need to be in the correct room\r\n\t\tcheckRoom(pcs, 2500, 2450, 2750, 2900, \"BE-Mess-Hall\")\r\n\t\tcheckRoom(pcs, 2800, 2650, 2950, 2900, \"BE-Mess-Hall\")\r\n\t\tbreak;\r\n\tcase \"The Black Geode\":\r\n\t\tprintEncounter(game.tables.entities.find(t => t.name === \"BG-Random-Encounters\").roll().results[0])\r\n\t\tbreak;\r\n\tcase \"Temple of the Crushing Wave\":\r\n\t\tcheckRoom(pcs, 4100, 4950, 4300, 5250, \"CW-Dark-Stream\")\r\n\t\tcheckRoom(pcs, 2400, 2750, 3450, 3200, \"CW-Market-Hall\")\r\n\t\tcheckRoom(pcs, 3500, 2350, 3650, 4400, \"CW-Canals\")\r\n\t\tcheckRoom(pcs, 2600, 4450, 3650, 4900, \"CW-Canals\")\r\n\t\tcheckRoom(pcs, 2100, 4750, 2750, 5100, \"CW-Canals\")\r\n\t\tcheckRoom(pcs, 2200, 3800, 2350, 4600, \"CW-Canals\")\r\n\t\tcheckRoom(pcs, 2100, 3650, 2150, 3700, \"CW-Canals\")\r\n\t\tcheckRoom(pcs, 1900, 3450, 1950, 3500, \"CW-Canals\")\r\n\t\tcheckRoom(pcs, 1200, 2950, 1750, 3300, \"CW-Canals\")\r\n\t\tcheckRoom(pcs, 1800, 2650, 2350, 3100, \"CW-Canals\")\r\n\t\tcheckRoom(pcs, 1600, 2350, 1750, 2900, \"CW-Canals\")\r\n\t\tcheckRoom(pcs, 1600, 2150, 3650, 2300, \"CW-Canals\")\r\n\t\tcheckRoom(pcs, 2400, 1750, 2450, 2100, \"CW-Canals\")\r\n\t\tcheckRoom(pcs, 2400, 1550, 3050, 1700, \"CW-Canals\")\r\n\t\tcheckRoom(pcs, 3300, 1450, 3550, 1700, \"CW-Canals\")\r\n\t\tbreak;\r\n\tcase \"The Dessarin Valley\":\r\n\t\tif (new Roll(\"1d20\", {}).roll().total >= 18){\r\n\t\t\tdessarin_valley.render(true)\r\n\t\t} else {\r\n\t\t\tprintMessage(\"No random encounter\");\r\n\t\t}\r\n\t\tbreak;\r\n\tcase \"Temple of Howling Hatred\":\r\n\t\tcheckRoom(pcs, 3100, 4850, 3550, 4900, \"HH-Living-Quarters\")\r\n\t\tcheckRoom(pcs, 3000, 4950, 3550, 5100, \"HH-Living-Quarters\")\r\n\t\tcheckRoom(pcs, 3800, 4550, 4050, 5100, \"HH-Living-Quarters\")\r\n\t\tcheckRoom(pcs, 3900, 3950, 4250, 4300, \"HH-Living-Quarters\")\r\n\t\tbreak;\r\n\tcase \"The Plunging Torrents\":\r\n\t\tprintEncounter(game.tables.entities.find(t => t.name === \"PT-Random-Encounters\").roll().results[0])\r\n\t\tbreak;\r\n\tcase \"Rivergard Keep\":\r\n\t\tif (new Roll(\"1d20\", {}).roll().total >= 18){\r\n\t\t\tcheckRoom(pcs, 2850, 1800, 3100, 2350, \"RGK-Castle-Yard\")\r\n\t\t\tcheckRoom(pcs, 2850, 2400, 3200, 2550, \"RGK-Castle-Yard\")\r\n\t\t\tcheckRoom(pcs, 2950, 2600, 3200, 2950, \"RGK-Castle-Yard\")\r\n\t\t\tcheckRoom(pcs, 3150, 1800, 3400, 1950, \"RGK-Castle-Yard\")\r\n\t\t\tcheckRoom(pcs, 3450, 1400, 3600, 1950, \"RGK-Castle-Yard\")\r\n\t\t\tcheckRoom(pcs, 3650, 1700, 3800, 2250, \"RGK-Castle-Yard\")\r\n\t\t\tcheckRoom(pcs, 3850, 1700, 4300, 1850, \"RGK-Castle-Yard\")\r\n\t\t\tcheckRoom(pcs, 4050, 1400, 4200, 1650, \"RGK-Castle-Yard\")\r\n\t\t} else {\r\n\t\t\tprintMessage(\"No random encounter\");\r\n\t\t}\r\n\t\tbreak;\r\n\tcase \"Sacred Stone Monastary\":\r\n\t\tif (new Roll(\"1d20\", {}).roll().total >= 18){\r\n\t\t\tif(game.scenes.active.data.darkness == 0) {\r\n\t\t\t\tmessage += \"during the <b>Daytime</b>. \";\r\n\t\t\t\tcheckRoom(pcs, 1500, 4150, 2150, 4300, \"SSM-Mines-Day\")\r\n\t\t\t\tcheckRoom(pcs, 1900, 4350, 2450, 5350, \"SSM-Mines-Day\")\r\n\t\t\t\tcheckRoom(pcs, 1300, 4450, 1850, 5300, \"SSM-Mines-Day\")\r\n\t\t\t\tcheckRoom(pcs, 2500, 4850, 3050, 5400, \"SSM-Mines-Day\")\r\n\t\t\t\tcheckRoom(pcs, 2400, 4050, 3650, 4300, \"SSM-Mines-Day\")\r\n\t\t\t\tcheckRoom(pcs, 3700, 4150, 4250, 4700, \"SSM-Mines-Day\")\r\n\t\t\t\tcheckRoom(pcs, 4000, 3650, 4150, 4100, \"SSM-Mines-Day\")\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tmessage += \"during the <b>Nighttime</b>. \"; \r\n\t\t\t\tcheckRoom(pcs, 1500, 4150, 2150, 4300, \"SSM-Mines-Night\")\r\n\t\t\t\tcheckRoom(pcs, 1900, 4350, 2450, 5350, \"SSM-Mines-Night\")\r\n\t\t\t\tcheckRoom(pcs, 1300, 4450, 1850, 5300, \"SSM-Mines-Night\")\r\n\t\t\t\tcheckRoom(pcs, 2500, 4850, 3050, 5400, \"SSM-Mines-Night\")\r\n\t\t\t\tcheckRoom(pcs, 2400, 4050, 3650, 4300, \"SSM-Mines-Night\")\r\n\t\t\t\tcheckRoom(pcs, 3700, 4150, 4250, 4700, \"SSM-Mines-Night\")\r\n\t\t\t\tcheckRoom(pcs, 4000, 3650, 4150, 4100, \"SSM-Mines-Night\")\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tprintMessage(\"No random encounter\");\r\n\t\t}\r\n\t\tbreak;\r\n\tcase \"The Weeping Colossus\":\r\n\t\tweeping_colossus.render(true)\r\n\t\tbreak;\r\n\tdefault:\r\n\t\tprintMessage(\"No random encounter\");\r\n}","author":"y5gmtwxmW3A5ZuOP","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"UDFnzUKwFmh714Gw","name":"Toggle Combat","permission":{"default":0,"y5gmtwxmW3A5ZuOP":3},"type":"script","flags":{},"scope":"global","command":"(async () => {\r\n\tif (game.combat) {\r\n\t\tasync function endCombat() {\r\n\t\t\t//get exp\r\n\t\t\tlet exp = 0;\r\n\t\t\tlet defeated = [];\r\n\t\t\tgame.combat.combatants.filter(x => !x.actor.isPC).filter(x => x.css.includes(\"defeated\")).forEach(function(a) { exp += a.actor.data.data.details.xp.value; defeated.push(a.name); });\r\n\t\t\tlet pcs = game.combat.combatants.filter(x => x.actor.isPC)\r\n\t\t\texp = Math.round(exp / pcs.length);\r\n\t\t\tgame.playlists.entities.find(data => data.name == \"Combat\").stopAll();\r\n\t\t\tgame.combat.delete();\r\n\t\t\tif (exp != 0 ) {\r\n\t\t\t\tChatMessage.create({\r\n\t\t\t\t\tuser: game.user._id,\r\n\t\t\t\t\tcontent: \"<p>For defeating <strong>\" + defeated.join(\", \") + \"</strong> each of you get <strong>\" + exp + \"</strong> experience!</p>\",\r\n\t\t\t\t\ttype: CONST.CHAT_MESSAGE_TYPES.OTHER\r\n\t\t\t\t}, {});\r\n\t\t\t\tfor(var i = 0; i < pcs.length; i++) {\r\n\t\t\t\t\tpcs[i].actor.data.data.details.xp.value += exp;\r\n\t\t\t\t\tpcs[i].actor.render();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(CONFIG[\"OldPlaylist\"]) {\r\n\t\t\t\tCONFIG[\"OldPlaylist\"].forEach(function(a) {a.playAll()});\r\n\t\t\t\tCONFIG[\"OldPlaylist\"] = null;\r\n\t\t\t}\r\n\t\t}\r\n\t\tlet d = Dialog.confirm({\r\n\t\t\ttitle: \"End Combat Encounter?\",\r\n\t\t\tcontent: \"<p>End this combat encounter and empty the turn tracker?</p>\",\r\n\t\t\tyes: () => endCombat()\r\n\t\t});\r\n\t}\r\n\telse {\r\n\t\tif (canvas.tokens.controlled.length === 0) {\r\n\t\tui.notifications.error(\"You must select at least one or more tokens on the map before starting combat.\");\r\n\t}\r\n\telse {\r\n\t\tasync function start() {\r\n\t\t\tfor (let token of canvas.tokens.controlled) {      \r\n\t\t\t\tif (token.inCombat === false){\r\n\t\t\t\t\tawait token.toggleCombat().then(() => game.combat.rollAll(null, {rollMode: 'gmroll'}));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tstart().then(function() {\r\n\t\t\t//save the currently playing playlist\r\n\t\t\tCONFIG[\"OldPlaylist\"] = game.playlists.playing\r\n\t\t\tasync function stopAll() {\r\n\t\t\t\tgame.playlists.playing.forEach(function(playing) {playing.stopAll()});\r\n\t\t\t}\r\n\t\t\tstopAll().then(function() {\r\n\t\t\t\tlet _combat = game.playlists.entities.find(data => data.name == \"Combat\");\r\n\t\t\t\tlet _music = _combat.sounds[Math.floor(Math.random() * _combat.sounds.length)];\r\n\t\t\t\t_combat.updateEmbeddedEntity(\"PlaylistSound\", {_id:_music._id, playing: true});\r\n\t\t\t});\r\n\t\t\tgame.combat.startCombat();\r\n\t\t});\r\n\t}\r\n\t}\r\n})();","author":"y5gmtwxmW3A5ZuOP","img":"icons/svg/combat.svg","actorIds":[]}
{"_id":"y5gmtdslK5A5ZuOP","name":"The Ruins of the Shire Random Encounters","permission":{"default":0,"y5gmtwxmW3A5ZuOP":3},"type":"script","flags":{},"scope":"global","command":"let message = \"The party has come across an <b>Encounter</b> \";\r\n\r\nfunction printMessage(message){\r\n\tlet chatData = {\r\n\t\tuser : game.user._id,\r\n\t\tcontent : \"<h2>Random Encounter</h2>\" + message,\r\n\t\twhisper : game.users.entities.filter(u => u.isGM).map(u => u._id)\r\n\t};\r\n\tChatMessage.create(chatData,{});\r\n}\r\n\r\nfunction printEncounter(result){\r\n\tif (result.text == \"None\"){\r\n\t\tmessage = \"No random encounter\";\r\n\t} else {\r\n\t\t//pause game if not already paused\r\n\t\tif(!game.paused) {\r\n\t\t\tgame.togglePause(true, true)\r\n\t\t}\r\n\t\t//play random encounter sound effect\r\n\t\tmessage += result.text;\r\n\t}\r\n\tprintMessage(message);\r\n}\r\n\r\n\r\nlet dessarin_valley = new Dialog({\r\n\ttitle: \"Check for Random Encounter\",\r\n\tcontent: \"Where to check for <b>Random Encounter</b>? During chapters 3 and 4 use the \\\"Early Travels\\\" random encounter table. During chapter 5 use the \\\"Later Travels\\\" table. At any point during travel on or very near the Dessarin River, use the \\\"River Travels\\\" table.\",\r\n\tbuttons:{\r\n\t\tearly:{\r\n\t\t\tlabel: \"Early Travels\",\r\n\t\t\tcallback: () => {\r\n\t\t\t\tmessage += \"in the <b>Early Travels</b> \";\r\n\t\t\t\tif(game.scenes.active.data.darkness == 0) {\r\n\t\t\t\t\tmessage += \"during the <b>Daytime</b>. \";\r\n\t\t\t\t\t//day time\r\n\t\t\t\t\tprintEncounter(game.tables.entities.find(t => t.name === \"DV-Early-Travels-Day\").roll().results[0]);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tmessage += \"during the <b>Nighttime</b>. \";\r\n\t\t\t\t\t//night time\r\n\t\t\t\t\tprintEncounter(game.tables.entities.find(t => t.name === \"DV-Early-Travels-Night\").roll().results[0]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t\triver:{\r\n\t\t\tlabel: \"River Travels\",\r\n\t\t\tcallback: () => {\r\n\t\t\t\tmessage += \"on the <b>River</b> \";\r\n\t\t\t\tprintEncounter(game.tables.entities.find(t => t.name === \"DV-River-Travels\").roll().results[0]);\r\n\t\t\t}\r\n\t\t},\r\n\t\tlater:{\r\n\t\t\tlabel: \"Later Travels\",\r\n\t\t\tcallback: () => {\r\n\t\t\t\tmessage += \"in the <b>Later Travels</b> \";\r\n\t\t\t\tif(game.scenes.active.data.darkness == 0) {\r\n\t\t\t\t\tmessage += \"during the <b>Daytime</b>. \";\r\n\t\t\t\t\t//day time\r\n\t\t\t\t\tprintEncounter(game.tables.entities.find(t => t.name === \"DV-Later-Travels-Day\").roll().results[0]);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tmessage += \"during the <b>Nighttime</b>. \";\r\n\t\t\t\t\t//night time\r\n\t\t\t\t\tprintEncounter(game.tables.entities.find(t => t.name === \"DV-Later-Travels-Night\").roll().results[0]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n})\r\n\r\nlet weeping_colossus = new Dialog({\r\n\ttitle: \"Check for Random Encounter\",\r\n\tcontent: \"For every 30 minutes the characters spend inside the Weeping Colossus, roll a d20 and consult the following table. In the medium intensity zone, roll a d20 and a d4, subtracting the d4 from the d20 roll. Use a d6 instead of a d4 in the high intensity zone.\",\r\n\tbuttons:{\r\n\t\tmedium:{\r\n\t\t\tlabel: \"Medium Heat Zone\",\r\n\t\t\tcallback: () => {\r\n\t\t\t\tmessage += \"in the <b>Medium Heat Zone</b> \";\r\n\t\t\t\tprintEncounter(game.tables.entities.find(t => t.name === \"WC-MediumHeat-Random-Encounters\").roll().results[0]);\r\n\t\t\t}\r\n\t\t},\r\n\t\thigh:{\r\n\t\t\tlabel: \"High Heat Zone\",\r\n\t\t\tcallback: () => {\r\n\t\t\t\tmessage += \"in the <b>High Heat Zone</b> \";\r\n\t\t\t\tprintEncounter(game.tables.entities.find(t => t.name === \"WC-HighHeat-Random-Encounters\").roll().results[0]);\r\n\t\t\t}\r\n\t\t},\r\n\t\tnone:{\r\n\t\t\tlabel: \"No Zone\",\r\n\t\t\tcallback: () => {\r\n\t\t\t\tmessage += \"in <b>No Zone</b> \";\r\n\t\t\t\tprintEncounter(game.tables.entities.find(t => t.name === \"WC-Random-Encounters\").roll().results[0]);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n})\r\n\r\nasync function checkRoom(pcs, x, y, w, h, table) {\r\n\tfor (var i = 0; i < pcs.length; i++) {\r\n\t\tlet t = await pcs[i].getActiveTokens()\r\n\t\tfor(var j = 0; j < t.length; j++) {\r\n\t\t\tif((t[j].x >= x && t[j].x <= w) && (t[j].y >= y && t[j].y <= h)) {\r\n\t\t\t\tprintEncounter(game.tables.entities.find(t => t.name === table).roll().results[0])\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\nlet pcs = game.actors.filter(a => a.isPC)\r\n\r\nif (new Roll(\"1d12\", {}).roll().total == 1) {\r\n    printEncounter(game.tables.entities.find(t => t.name === \"Random Encounters\").roll().results[0])\r\n}\r\nelse {\r\n    printMessage(\"No random encounter\");\r\n}","author":"y5gmtwxmW3A5ZuOP","img":"icons/svg/dice-target.svg","actorIds":[]}
