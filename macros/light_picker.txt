Macro:
Name: Light Picker
Image: systems/dnd5e/icons/items/inventory/lantern.jpg
Scope: global
Type: script
Command:
(async () => {
	let token = null;
	if(game.user.isGM) {
		console.log(canvas.tokens.controlled);
		if(canvas.tokens.controlled.length == 1) {
			token = canvas.tokens.controlled[0];
		}
		else {
			return ui.notifications.error("Only select one token at a time!");
		}
	}
	else {
		if(canvas.tokens.controlled.length == 1) {
			if(game.user.charname == canvas.tokens.controlled[0].name) {
				token = canvas.tokens.controlled[0];
			}
			else {
				ui.notifications.error("You can only change your own token!");
				return;
			}
		}
		else {
			ui.notifications.error("You must select your token!");
			return;
		}
	}
	if(token) {
		let applyChanges = false;
		new Dialog({
			title: token.name + ` Vision Configuration`,
			content: `
				<form>
					<div class="form-group">
						<label>Halved Vision?</label><input type="checkbox" id="halved-vision">
					</div>
					<div class="form-group">
						<label>Light Source:</label>
						<select id="light-source" name="light-source">
						<option value="nochange">No Change</option>
						<option value="none">None</option>
						<option value="candle">Candle</option>
						<option value="lamp">Lamp</option>
						<option value="bullseye">Lantern (Bullseye)</option>
						<option value="hooded-dim">Lantern (Hooded - Dim)</option>
						<option value="hooded-bright">Lantern (Hooded - Bright)</option>
						<option value="torch">Torch</option>
						</select>
					</div>
				</form>`,
			buttons: {
				yes: {
					icon: "<i class='fas fa-check'></i>",
					label: `Apply Changes`,
					callback: () => applyChanges = true
				},
				no: {
					icon: "<i class='fas fa-times'></i>",
					label: `Cancel Changes`
				},
			},
			default: "yes",
			close: html => {
			if (applyChanges) {
				let halved = html.find('#halved-vision')[0].checked;
				let visionType = token.actor.data.data.traits.senses;
				let lightSource = html.find('[name="light-source"]')[0].value || "none";
				let dimSight = 0;
				let brightSight = 0;
				let dimLight = 0;
				let brightLight = 0;
				let lightAngle = 360;
				let lockRotation = token.data.lockRotation;
				// Get Vision Type Values
				console.log(visionType);
				if(visionType.includes("darkvision 30 ft.")) {
					dimSight = 30;
					brightSight = 0;
				}
				else if(visionType.includes("darkvision 60 ft.")) {
					dimSight = 60;
					brightSight = 0;
				}
				else if(visionType.includes("darkvision 90 ft.")) {
					dimSight = 90;
					brightSight = 0;
				}
				else if(visionType.includes("darkvision 120 ft.")) {
					dimSight = 120;
					brightSight = 0;
				}
				else if(visionType.includes("darkvision 150 ft.")) {		
					dimSight = 150;
					brightSight = 0;
				}
				else if(visionType.includes("darkvision 180 ft.")) {
					dimSight = 180;
					brightSight = 0;
				}
				else if(visionType.includes("Devil's Sight")) {
					dimSight = 0;
					brightSight= 120;
				}
				else {
					dimSight = 0;
					brightSight = 0;
				}
				// Get Light Source Values
				switch (lightSource) {
					case "none":
						halved = false;
						dimLight = 0;
						brightLight = 0;
						break;
					case "candle":
						if(token.actor.items.find(x => x.name == "Candle")) {
							if(token.actor.items.find(x => x.name == "Candle").data.data.quantity != 0) {
								token.actor.items.find(x => x.name == "Candle").rollConsumable();
								dimLight = 10;
								if (halved) dimLight = 5;
								brightLight = 5;
							}
							else {
								ui.notifications.error("The token does not have any Candles to light")
								return;
							};
						}
						else {
							ui.notifications.error("The token does not have any Candles to light");
							return;
						}
						break;
					case "lamp":
						if(token.actor.items.find(x => x.name == "Lamp") && token.actor.items.find(x => x.name == "Oil Flask")) {
							if(token.actor.items.find(x => x.name == "Oil Flask").data.data.quantity != 0) {
								token.actor.items.find(x => x.name == "Oil Flask").rollConsumable();
								dimLight = 45;
								brightLight = 15;
								if (halved) {
									dimLight = 25;
									brightLight = 5;
								}
							}
							else {
								ui.notifications.error("The token does not have any oil to light the Lamp with");
								return;
							};
						}
						else { 
							ui.notifications.error("The token does not have a Lamp to light");
							return;
						}
						break;
					case "bullseye":
						if(token.actor.items.find(x => x.name == "Bullseye Lantern") && token.actor.items.find(x => x.name == "Oil Flask")) {
							if(token.actor.items.find(x => x.name == "Oil Flask").data.data.quantity != 0) {
								token.actor.items.find(x => x.name == "Oil Flask").rollConsumable();
								dimLight = 120;
								brightLight = 60;
								lockRotation = false;
								lightAngle = 52.5;
								if (halved) {
									dimLight = 60;
									brightLight = 30;
								}
							}
							else {
								ui.notifications.error("The token does not have any oil to light the Bullseye Lantern with");
								return;
							};
						}
						else {
							ui.notifications.error("The token does not have a Bullseye Lantern to light");
							return;
						}
						break;
					case "hooded-dim":
						if(token.actor.items.find(x => x.name == "Hooded Lantern")) {
							dimLight = 5;
							brightLight = 0;
						}
						else {
							ui.notifications.error("The token does not have a Hooded Lantern to light");
							return;
						};
						break;
					case "hooded-bright":
						if (token.actor.items.find(x => x.name == "Hooded Lantern") && token.actor.items.find(x => x.name == "Oil Flask")) {	
							if(token.actor.items.find(x => x.name == "Oil Flask").data.data.quantity != 0) {
								token.actor.items.find(x => x.name == "Oil Flask").rollConsumable();
								dimLight = 60;
								brightLight = 30;
								if (halved) {
									dimLight = 30;
									brightLight = 15;
								}
							}	  
							else {
								ui.notifications.error("The token does not have any oil to light the Hooded Lantern with");
								return;
							};
						}
						else {
							ui.notifications.error("The token does not have a Hooded Lantern to light");
							return;
						};
						break;
					case "nochange":
					default:
						halved = false;
						dimLight = token.data.dimLight;
						brightLight = token.data.brightLight;
						lightAngle = token.data.lightAngle;
						lockRotation = token.data.lockRotation;
				}
				if (halved) {
					ChatMessage.create({
						user: game.user._id,
						content: "<p>Something in your environment is obscuring your vision, you can only see half the distance you would normally see.</p>",
						type: CONST.CHAT_MESSAGE_TYPES.OTHER
					}, {});
				}
				// Update Token
				token.update({
					vision: true,
					dimSight: dimSight,
					brightSight: brightSight,
					dimLight: dimLight,
					brightLight:  brightLight,
					lightAngle: lightAngle,
					lockRotation: lockRotation
					});
				}
			}
		}).render(true);
	}
	else {
		ui.notifications.error("No Token Selected");
		return;
	}
})();