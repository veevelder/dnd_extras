Macro:
Name: Toggle Light
Image: systems/dnd5e/icons/items/inventory/lantern.jpg
Scope: global
Type: script
Command:
(async () => {
	let token = null;
	if(game.user.isGM) {
		if(canvas.tokens.controlled.length == 1) {
			token = canvas.tokens.controlled[0];
		}
		else {
			return ui.notifications.error("Only select one token at a time!");
		}
	}
	else {
		if(canvas.tokens.controlled.length == 1) {
			if(game.user.charname == canvas.tokens.controlled[0].name) {
				token = canvas.tokens.controlled[0];
			}
			else {
				ui.notifications.error("You can only change your own token!");
				return;
			}
		}
		else {
			ui.notifications.error("You must select your token!");
			return;
		}
	}
	if(token) {
		let candle = token.actor.items.find(x => x.name == "Candle");
		let oil = token.actor.items.find(x => x.name == "Oil Flask");
		let lamp = token.actor.items.find(x => x.name == "Lamp");
		let bullseye = token.actor.items.find(x => x.name == "Bullseye Lantern");
		let hooded = token.actor.items.find(x => x.name == "Hooded Lantern");
		let torch = token.actor.items.find(x => x.name == "Torch");
					
		if(token.hasLight) {
			async function offLight() {
				token.hasLight = "";
				// Update Token
				token.update({
					vision: true,
					dimLight: 0,
					brightLight:  0,
					lightAngle: 360,
					lockRotation: 0
				});
			}
			let d = Dialog.confirm({
			  title: "Turn off Light Source?",
			  content: "<p>Turn off the current light source (" + token.hasLight + ") for this token?</p>",
			  yes: () => offLight()
			});
		}
		else {
			let options = "";
			if (candle) options += "<option value='candle'>Candle</option>";
			if (lamp) options += "<option value='lamp'>Lamp</option>";
			if (bullseye) options += "<option value='bullseye'>Lantern (Bullseye)</option>";
			if (hooded) option += "<option value='hooded-dim'>Lantern (Hooded - Dim)</option><option value='hooded-bright'>Lantern (Hooded - Bright)</option>";
			if (torch) options += "<option value='torch'>Torch</option>";
		
			let applyChanges = false;
			new Dialog({
				title: token.name + ` Vision Configuration`,
				content: `
					<form>
						<div class="form-group">
							<label>Halved Vision?</label><input type="checkbox" id="halved-vision">
						</div>
						<div class="form-group">
							<label>Light Source:</label>
							<select id="light-source" name="light-source">` + options + `</select>
						</div>
					</form>`,
				buttons: {
					yes: {
						icon: "<i class='fas fa-check'></i>",
						label: `Apply Changes`,
						callback: () => applyChanges = true
					},
					no: {
						icon: "<i class='fas fa-times'></i>",
						label: `Cancel Changes`
					},
				},
				default: "yes",
				close: html => {
					if (applyChanges) {
						let dimSight = 0;
						let brightSight = 0;
						let dimLight = token.data.dimLight;
						let brightLight = token.data.brightLight;
						let lightAngle = token.data.lightAngle;
						let lockRotation = token.data.lockRotation;
						
						if(token.actor.data.data.traits.senses.includes("darkvision 30 ft.")) {
							dimSight = 30;
							brightSight = 0;
						}
						else if(token.actor.data.data.traits.senses.includes("darkvision 60 ft.")) {
							dimSight = 60;
							brightSight = 0;
						}
						else if(token.actor.data.data.traits.senses.includes("darkvision 90 ft.")) {
							dimSight = 90;
							brightSight = 0;
						}
						else if(token.actor.data.data.traits.senses.includes("darkvision 120 ft.")) {
							dimSight = 120;
							brightSight = 0;
						}
						else if(token.actor.data.data.traits.senses.includes("darkvision 150 ft.")) {		
							dimSight = 150;
							brightSight = 0;
						}
						else if(token.actor.data.data.traits.senses.includes("darkvision 180 ft.")) {
							dimSight = 180;
							brightSight = 0;
						}
						else if(token.actor.data.data.traits.senses.includes("Devil's Sight")) {
							dimSight = 0;
							brightSight= 120;
						}
						else {
							dimSight = 0;
							brightSight = 0;
						}
					
					
						let halved = html.find('#halved-vision')[0].checked;
						let lightSource = html.find('[name="light-source"]')[0].value || "none";
						token.hasLight = lightSource;

						// Get Light Source Values
						switch (lightSource) {
							case "candle":
								if(candle) {
									if(candle.data.data.quantity != 0) {
										candle.rollConsumable();
										dimLight = 10;
										if (halved) dimLight = 5;
										brightLight = 5;
									}
									else {
										return ui.notifications.error("The token does not have any Candles to light")
									};
								}
								else {
									return ui.notifications.error("The token does not have any Candles to light");
								}
								break;
							case "lamp":
								if(lamp && oil) {
									if(oil.data.data.quantity != 0) {
										oil.rollConsumable();
										dimLight = 45;
										brightLight = 15;
										if (halved) {
											dimLight = 25;
											brightLight = 5;
										}
									}
									else {
										return ui.notifications.error("The token does not have any oil to light the Lamp with");
									};
								}
								else { 
									return ui.notifications.error("The token does not have a Lamp to light");
								}
								break;
							case "bullseye":
								if(bullseye && oil) {
									if(oil.data.data.quantity != 0) {
										oil.rollConsumable();
										dimLight = 120;
										brightLight = 60;
										lockRotation = false;
										lightAngle = 52.5;
										if (halved) {
											dimLight = 60;
											brightLight = 30;
										}
									}
									else {
										return ui.notifications.error("The token does not have any oil to light the Bullseye Lantern with");
									};
								}
								else {
									return ui.notifications.error("The token does not have a Bullseye Lantern to light");
								}
								break;
							case "hooded-dim":
								if(hooded) {
									dimLight = 5;
									brightLight = 0;
								}
								else {
									return ui.notifications.error("The token does not have a Hooded Lantern to light");
								};
								break;
							case "hooded-bright":
								if (hooded && oil) {	
									if(oil.data.data.quantity != 0) {
										oil.rollConsumable();
										dimLight = 60;
										brightLight = 30;
										if (halved) {
											dimLight = 30;
											brightLight = 15;
										}
									}	  
									else {
										return ui.notifications.error("The token does not have any oil to light the Hooded Lantern with");
									};
								}
								else {
									return ui.notifications.error("The token does not have a Hooded Lantern to light");
								};
								break;
							case "torch":
								if(torch) {
									if(torch.data.data.quantity != 0) {
										torch.rollConsumable();
										dimLight = 40;
										brightLight = 20;
										if (halved) {
											dimLight = 20;
											brightLight = 10;
										}
									}
									else {
										return ui.notifications.error("The token does not have any Torchs to light");
									}
								}
								else return ui.notifications.error("The token does not have a Torch to light");
								break;
						}
						if (halved) {
							ChatMessage.create({
								user: game.user._id,
								content: "<p>Something in your environment is obscuring your vision, you can only see half the distance you would normally see.</p>",
								type: CONST.CHAT_MESSAGE_TYPES.OTHER
							}, {});
						}
						// Update Token
						token.update({
							vision: true,
							dimSight: dimSight,
							brightSight: brightSight,
							dimLight: dimLight,
							brightLight:  brightLight,
							lightAngle: lightAngle,
							lockRotation: lockRotation
						});
					}
				}
			}).render(true);
		}
	}
	else {
		ui.notifications.error("No Token Selected");
		return;
	}
})();